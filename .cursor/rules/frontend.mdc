---
description:
globs: src/**/*.tsx,src/**/*.ts
alwaysApply: false
---

## Frontend

### General Guidelines

- Favor functional components and Hooks; avoid class components
- Strongly type props and component return types with TypeScript
- Keep side effects in `useEffect` with correct dependency arrays; avoid hidden dependencies
- Use memoization (`useMemo`, `useCallback`, `React.memo`) for expensive calculations and stable props
- Handle errors with Error Boundaries; use Suspense where appropriate
- Ensure accessibility: semantic HTML, ARIA roles, keyboard navigation, focus management
- Use Shadcn/ui components from `src/components/ui` and prefer composition over deep prop drilling

### Guidelines for Styling

#### Tailwind

- Prefer utility-first classes; extract patterns with `@apply` sparingly
- Use arbitrary values with square brackets (e.g., `w-[123px]`) when necessary
- Configure Tailwind theme, plugins, and variants in `tailwind.config.ts`
- Use `theme()` in CSS for Tailwind theme values
- Implement dark mode with the `dark:` variant
- Use responsive variants (`sm:`, `md:`, `lg:`, etc.) for adaptive designs
- Leverage state variants (`hover:`, `focus-visible:`, `active:`, etc.) for interactive elements

### Guidelines for Accessibility

#### ARIA Best Practices

- Use ARIA landmarks to identify regions of the page (main, navigation, search, etc.)
- Apply appropriate ARIA roles to custom interface elements that lack semantic HTML equivalents
- Set `aria-expanded` and `aria-controls` for expandable content like accordions and dropdowns
- Use `aria-live` regions with appropriate politeness settings for dynamic content updates
- Implement `aria-hidden` to hide decorative or duplicative content from screen readers
- Apply `aria-label` or `aria-labelledby` for elements without visible text labels
- Use `aria-describedby` to associate descriptive text with form inputs or complex elements
- Implement `aria-current` for indicating the current item in a set, navigation, or process
- Avoid redundant ARIA that duplicates the semantics of native HTML elements
